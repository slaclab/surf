/*
 * -------------------------------------------------------------------
 * This Verilog file has been automatically generated from a core originally written
 * in Bluespec SystemVerilog (BSV). The original source code can be found at:
 *
 * Repository: https://github.com/datenlord/blue-rdma
 * Author: DatenLord (https://datenlord.github.io/)
 *
 * Modifications have been made to the original core before compiling the Verilog.
 * For any questions or further information regarding the modifications, please
 * feel free to contact me.
 *
 * Modifications by: Filippo Marini
 * Email: filippo.marini@pd.infn.it
 * -------------------------------------------------------------------
 */
//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa)
//
//
//
// Ports:
// Name                         I/O  size props
// s_work_req_ready               O     1 reg
// s_data_stream_tready           O     1 reg
// m_data_stream_tvalid           O     1 reg
// m_data_stream_tdata            O   256 reg
// m_data_stream_tkeep            O    32 reg
// m_data_stream_tfirst           O     1 reg
// m_data_stream_tlast            O     1 reg
// m_work_comp_sq_valid           O     1 reg
// m_work_comp_sq_id              O    64 reg
// m_work_comp_sq_op_code         O     8 reg
// m_work_comp_sq_flags           O     7 reg
// m_work_comp_sq_status          O     5 reg
// m_work_comp_sq_len             O    32 reg
// m_work_comp_sq_pkey            O    16 reg
// m_work_comp_sq_qpn             O    24 reg
// m_work_comp_sq_imm_dt          O    33 reg
// m_work_comp_sq_rkey_to_inv     O    33 reg
// s_meta_data_tready             O     1 reg
// m_meta_data_tvalid             O     1 reg
// m_meta_data_tdata              O   276 reg
// m_dma_read_valid               O     1 reg
// m_dma_read_initiator           O     4 reg
// m_dma_read_sqpn                O    24 reg
// m_dma_read_wr_id               O    64 reg
// m_dma_read_start_addr          O    64 reg
// m_dma_read_len                 O    13 reg
// m_dma_read_mr_idx              O     1 reg
// s_dma_read_ready               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// s_work_req_valid               I     1
// s_work_req_id                  I    64 reg
// s_work_req_op_code             I     4 reg
// s_work_req_flags               I     5 reg
// s_work_req_raddr               I    64 reg
// s_work_req_rkey                I    32 reg
// s_work_req_len                 I    32 reg
// s_work_req_laddr               I    64 reg
// s_work_req_lkey                I    32 reg
// s_work_req_sqpn                I    24 reg
// s_work_req_solicited           I     1 reg
// s_work_req_comp                I    65 reg
// s_work_req_swap                I    65 reg
// s_work_req_imm_dt              I    33 reg
// s_work_req_rkey_to_inv         I    33 reg
// s_work_req_srqn                I    25 reg
// s_work_req_dqpn                I    25 reg
// s_work_req_qkey                I    33 reg
// s_data_stream_tvalid           I     1
// s_data_stream_tdata            I   256 reg
// s_data_stream_tkeep            I    32 reg
// s_data_stream_tfirst           I     1 reg
// s_data_stream_tlast            I     1 reg
// m_data_stream_tready           I     1
// m_work_comp_sq_ready           I     1
// s_meta_data_tvalid             I     1
// s_meta_data_tdata              I   303 reg
// m_meta_data_tready             I     1
// m_dma_read_ready               I     1
// s_dma_read_valid               I     1
// s_dma_read_initiator           I     4 reg
// s_dma_read_sqpn                I    24 reg
// s_dma_read_wr_id               I    64 reg
// s_dma_read_is_resp_err         I     1 reg
// s_dma_read_data_stream         I   290 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAxiSTransportLayer(CLK,
			    RST_N,

			    s_work_req_valid,
			    s_work_req_id,
			    s_work_req_op_code,
			    s_work_req_flags,
			    s_work_req_raddr,
			    s_work_req_rkey,
			    s_work_req_len,
			    s_work_req_laddr,
			    s_work_req_lkey,
			    s_work_req_sqpn,
			    s_work_req_solicited,
			    s_work_req_comp,
			    s_work_req_swap,
			    s_work_req_imm_dt,
			    s_work_req_rkey_to_inv,
			    s_work_req_srqn,
			    s_work_req_dqpn,
			    s_work_req_qkey,

			    s_work_req_ready,

			    s_data_stream_tvalid,
			    s_data_stream_tdata,
			    s_data_stream_tkeep,
			    s_data_stream_tfirst,
			    s_data_stream_tlast,

			    s_data_stream_tready,

			    m_data_stream_tvalid,

			    m_data_stream_tdata,

			    m_data_stream_tkeep,

			    m_data_stream_tfirst,

			    m_data_stream_tlast,

			    m_data_stream_tready,

			    m_work_comp_sq_valid,

			    m_work_comp_sq_id,

			    m_work_comp_sq_op_code,

			    m_work_comp_sq_flags,

			    m_work_comp_sq_status,

			    m_work_comp_sq_len,

			    m_work_comp_sq_pkey,

			    m_work_comp_sq_qpn,

			    m_work_comp_sq_imm_dt,

			    m_work_comp_sq_rkey_to_inv,

			    m_work_comp_sq_ready,

			    s_meta_data_tvalid,
			    s_meta_data_tdata,

			    s_meta_data_tready,

			    m_meta_data_tvalid,

			    m_meta_data_tdata,

			    m_meta_data_tready,

			    m_dma_read_valid,

			    m_dma_read_initiator,

			    m_dma_read_sqpn,

			    m_dma_read_wr_id,

			    m_dma_read_start_addr,

			    m_dma_read_len,

			    m_dma_read_mr_idx,

			    m_dma_read_ready,

			    s_dma_read_valid,
			    s_dma_read_initiator,
			    s_dma_read_sqpn,
			    s_dma_read_wr_id,
			    s_dma_read_is_resp_err,
			    s_dma_read_data_stream,

			    s_dma_read_ready);
  input  CLK;
  input  RST_N;

  // action method rawWorkReqIn_validData
  input  s_work_req_valid;
  input  [63 : 0] s_work_req_id;
  input  [3 : 0] s_work_req_op_code;
  input  [4 : 0] s_work_req_flags;
  input  [63 : 0] s_work_req_raddr;
  input  [31 : 0] s_work_req_rkey;
  input  [31 : 0] s_work_req_len;
  input  [63 : 0] s_work_req_laddr;
  input  [31 : 0] s_work_req_lkey;
  input  [23 : 0] s_work_req_sqpn;
  input  s_work_req_solicited;
  input  [64 : 0] s_work_req_comp;
  input  [64 : 0] s_work_req_swap;
  input  [32 : 0] s_work_req_imm_dt;
  input  [32 : 0] s_work_req_rkey_to_inv;
  input  [24 : 0] s_work_req_srqn;
  input  [24 : 0] s_work_req_dqpn;
  input  [32 : 0] s_work_req_qkey;

  // value method rawWorkReqIn_ready
  output s_work_req_ready;

  // action method rawRdmaDataStreamIn_validData
  input  s_data_stream_tvalid;
  input  [255 : 0] s_data_stream_tdata;
  input  [31 : 0] s_data_stream_tkeep;
  input  s_data_stream_tfirst;
  input  s_data_stream_tlast;

  // value method rawRdmaDataStreamIn_ready
  output s_data_stream_tready;

  // value method rawRdmaDataStreamOut_valid
  output m_data_stream_tvalid;

  // value method rawRdmaDataStreamOut_data
  output [255 : 0] m_data_stream_tdata;

  // value method rawRdmaDataStreamOut_byteEn
  output [31 : 0] m_data_stream_tkeep;

  // value method rawRdmaDataStreamOut_isFirst
  output m_data_stream_tfirst;

  // value method rawRdmaDataStreamOut_isLast
  output m_data_stream_tlast;

  // action method rawRdmaDataStreamOut_ready
  input  m_data_stream_tready;

  // value method rawWorkCompSQOut_valid
  output m_work_comp_sq_valid;

  // value method rawWorkCompSQOut_id
  output [63 : 0] m_work_comp_sq_id;

  // value method rawWorkCompSQOut_opcode
  output [7 : 0] m_work_comp_sq_op_code;

  // value method rawWorkCompSQOut_flags
  output [6 : 0] m_work_comp_sq_flags;

  // value method rawWorkCompSQOut_status
  output [4 : 0] m_work_comp_sq_status;

  // value method rawWorkCompSQOut_len
  output [31 : 0] m_work_comp_sq_len;

  // value method rawWorkCompSQOut_pKey
  output [15 : 0] m_work_comp_sq_pkey;

  // value method rawWorkCompSQOut_qpn
  output [23 : 0] m_work_comp_sq_qpn;

  // value method rawWorkCompSQOut_immDt
  output [32 : 0] m_work_comp_sq_imm_dt;

  // value method rawWorkCompSQOut_rkey2Inv
  output [32 : 0] m_work_comp_sq_rkey_to_inv;

  // action method rawWorkCompSQOut_ready
  input  m_work_comp_sq_ready;

  // action method rawMetaDataStreamIn_validData
  input  s_meta_data_tvalid;
  input  [302 : 0] s_meta_data_tdata;

  // value method rawMetaDataStreamIn_ready
  output s_meta_data_tready;

  // value method rawMetaDataStreamOut_valid
  output m_meta_data_tvalid;

  // value method rawMetaDataStreamOut_metaDataResp
  output [275 : 0] m_meta_data_tdata;

  // action method rawMetaDataStreamOut_ready
  input  m_meta_data_tready;

  // value method rawDmaReadCltStreamOut_valid
  output m_dma_read_valid;

  // value method rawDmaReadCltStreamOut_initiator
  output [3 : 0] m_dma_read_initiator;

  // value method rawDmaReadCltStreamOut_sqpn
  output [23 : 0] m_dma_read_sqpn;

  // value method rawDmaReadCltStreamOut_wrID
  output [63 : 0] m_dma_read_wr_id;

  // value method rawDmaReadCltStreamOut_startAddr
  output [63 : 0] m_dma_read_start_addr;

  // value method rawDmaReadCltStreamOut_len
  output [12 : 0] m_dma_read_len;

  // value method rawDmaReadCltStreamOut_mrIdx
  output m_dma_read_mr_idx;

  // action method rawDmaReadCltStreamOut_ready
  input  m_dma_read_ready;

  // action method rawDmaReadCltStreamIn_validData
  input  s_dma_read_valid;
  input  [3 : 0] s_dma_read_initiator;
  input  [23 : 0] s_dma_read_sqpn;
  input  [63 : 0] s_dma_read_wr_id;
  input  s_dma_read_is_resp_err;
  input  [289 : 0] s_dma_read_data_stream;

  // value method rawDmaReadCltStreamIn_ready
  output s_dma_read_ready;

  // signals for module outputs
  wire [275 : 0] m_meta_data_tdata;
  wire [255 : 0] m_data_stream_tdata;
  wire [63 : 0] m_dma_read_start_addr, m_dma_read_wr_id, m_work_comp_sq_id;
  wire [32 : 0] m_work_comp_sq_imm_dt, m_work_comp_sq_rkey_to_inv;
  wire [31 : 0] m_data_stream_tkeep, m_work_comp_sq_len;
  wire [23 : 0] m_dma_read_sqpn, m_work_comp_sq_qpn;
  wire [15 : 0] m_work_comp_sq_pkey;
  wire [12 : 0] m_dma_read_len;
  wire [7 : 0] m_work_comp_sq_op_code;
  wire [6 : 0] m_work_comp_sq_flags;
  wire [4 : 0] m_work_comp_sq_status;
  wire [3 : 0] m_dma_read_initiator;
  wire m_data_stream_tfirst,
       m_data_stream_tlast,
       m_data_stream_tvalid,
       m_dma_read_mr_idx,
       m_dma_read_valid,
       m_meta_data_tvalid,
       m_work_comp_sq_valid,
       s_data_stream_tready,
       s_dma_read_ready,
       s_meta_data_tready,
       s_work_req_ready;

  // inlined wires
  wire [600 : 0] rawWorkReqSlv_rawBus_rawBus_dataW_wget;
  wire [382 : 0] rawDmaReadCltStreamSlv_rawBus_rawBus_dataW_wget;
  wire [302 : 0] rawMetaDataStreamSlv_rawBus_rawBus_dataW_wget;
  wire [289 : 0] rawRdmaDataStreamMst_rawBus_rawBus_dataW_wget,
		 rawRdmaDataStreamSlv_rawBus_rawBus_dataW_wget;
  wire [275 : 0] rawMetaDataStreamMst_rawBus_rawBus_dataW_wget;
  wire [221 : 0] rawWorkCompSQMst_rawBus_rawBus_dataW_wget;
  wire [169 : 0] rawDmaReadCltStreamMst_rawBus_rawBus_dataW_wget;
  wire rawDmaReadCltStreamMst_rawBus_rawBus_dataW_whas,
       rawDmaReadCltStreamMst_rawBus_rawBus_readyW_wget,
       rawDmaReadCltStreamSlv_rawBus_rawBus_validW_wget,
       rawMetaDataStreamMst_rawBus_rawBus_dataW_whas,
       rawMetaDataStreamMst_rawBus_rawBus_readyW_wget,
       rawMetaDataStreamSlv_rawBus_rawBus_validW_wget,
       rawRdmaDataStreamMst_rawBus_rawBus_dataW_whas,
       rawRdmaDataStreamMst_rawBus_rawBus_readyW_wget,
       rawRdmaDataStreamSlv_rawBus_rawBus_validW_wget,
       rawWorkCompSQMst_rawBus_rawBus_dataW_whas,
       rawWorkCompSQMst_rawBus_rawBus_readyW_wget,
       rawWorkReqSlv_rawBus_rawBus_validW_wget;

  // ports of submodule rawDmaReadCltStreamMst_rawBus_fifo
  wire [169 : 0] rawDmaReadCltStreamMst_rawBus_fifo_D_IN,
		 rawDmaReadCltStreamMst_rawBus_fifo_D_OUT;
  wire rawDmaReadCltStreamMst_rawBus_fifo_CLR,
       rawDmaReadCltStreamMst_rawBus_fifo_DEQ,
       rawDmaReadCltStreamMst_rawBus_fifo_EMPTY_N,
       rawDmaReadCltStreamMst_rawBus_fifo_ENQ,
       rawDmaReadCltStreamMst_rawBus_fifo_FULL_N;

  // ports of submodule rawDmaReadCltStreamSlv_rawBus_fifo
  wire [382 : 0] rawDmaReadCltStreamSlv_rawBus_fifo_D_IN,
		 rawDmaReadCltStreamSlv_rawBus_fifo_D_OUT;
  wire rawDmaReadCltStreamSlv_rawBus_fifo_CLR,
       rawDmaReadCltStreamSlv_rawBus_fifo_DEQ,
       rawDmaReadCltStreamSlv_rawBus_fifo_EMPTY_N,
       rawDmaReadCltStreamSlv_rawBus_fifo_ENQ,
       rawDmaReadCltStreamSlv_rawBus_fifo_FULL_N;

  // ports of submodule rawMetaDataStreamMst_rawBus_fifo
  reg [275 : 0] rawMetaDataStreamMst_rawBus_fifo_D_IN;
  wire [275 : 0] rawMetaDataStreamMst_rawBus_fifo_D_OUT;
  wire rawMetaDataStreamMst_rawBus_fifo_CLR,
       rawMetaDataStreamMst_rawBus_fifo_DEQ,
       rawMetaDataStreamMst_rawBus_fifo_EMPTY_N,
       rawMetaDataStreamMst_rawBus_fifo_ENQ,
       rawMetaDataStreamMst_rawBus_fifo_FULL_N;

  // ports of submodule rawMetaDataStreamSlv_rawBus_fifo
  wire [302 : 0] rawMetaDataStreamSlv_rawBus_fifo_D_IN,
		 rawMetaDataStreamSlv_rawBus_fifo_D_OUT;
  wire rawMetaDataStreamSlv_rawBus_fifo_CLR,
       rawMetaDataStreamSlv_rawBus_fifo_DEQ,
       rawMetaDataStreamSlv_rawBus_fifo_EMPTY_N,
       rawMetaDataStreamSlv_rawBus_fifo_ENQ,
       rawMetaDataStreamSlv_rawBus_fifo_FULL_N;

  // ports of submodule rawRdmaDataStreamMst_rawBus_fifo
  wire [289 : 0] rawRdmaDataStreamMst_rawBus_fifo_D_IN,
		 rawRdmaDataStreamMst_rawBus_fifo_D_OUT;
  wire rawRdmaDataStreamMst_rawBus_fifo_CLR,
       rawRdmaDataStreamMst_rawBus_fifo_DEQ,
       rawRdmaDataStreamMst_rawBus_fifo_EMPTY_N,
       rawRdmaDataStreamMst_rawBus_fifo_ENQ,
       rawRdmaDataStreamMst_rawBus_fifo_FULL_N;

  // ports of submodule rawRdmaDataStreamSlv_rawBus_fifo
  wire [289 : 0] rawRdmaDataStreamSlv_rawBus_fifo_D_IN,
		 rawRdmaDataStreamSlv_rawBus_fifo_D_OUT;
  wire rawRdmaDataStreamSlv_rawBus_fifo_CLR,
       rawRdmaDataStreamSlv_rawBus_fifo_DEQ,
       rawRdmaDataStreamSlv_rawBus_fifo_EMPTY_N,
       rawRdmaDataStreamSlv_rawBus_fifo_ENQ,
       rawRdmaDataStreamSlv_rawBus_fifo_FULL_N;

  // ports of submodule rawWorkCompSQMst_rawBus_fifo
  wire [221 : 0] rawWorkCompSQMst_rawBus_fifo_D_IN,
		 rawWorkCompSQMst_rawBus_fifo_D_OUT;
  wire rawWorkCompSQMst_rawBus_fifo_CLR,
       rawWorkCompSQMst_rawBus_fifo_DEQ,
       rawWorkCompSQMst_rawBus_fifo_EMPTY_N,
       rawWorkCompSQMst_rawBus_fifo_ENQ,
       rawWorkCompSQMst_rawBus_fifo_FULL_N;

  // ports of submodule rawWorkReqSlv_rawBus_fifo
  wire [600 : 0] rawWorkReqSlv_rawBus_fifo_D_IN,
		 rawWorkReqSlv_rawBus_fifo_D_OUT;
  wire rawWorkReqSlv_rawBus_fifo_CLR,
       rawWorkReqSlv_rawBus_fifo_DEQ,
       rawWorkReqSlv_rawBus_fifo_EMPTY_N,
       rawWorkReqSlv_rawBus_fifo_ENQ,
       rawWorkReqSlv_rawBus_fifo_FULL_N;

  // ports of submodule transportLayer
  wire [600 : 0] transportLayer_workReqInput_put;
  wire [382 : 0] transportLayer_dmaReadClt_response_put;
  wire [302 : 0] transportLayer_srvPortMetaData_request_put;
  wire [289 : 0] transportLayer_rdmaDataStreamInput_put,
		 transportLayer_rdmaDataStreamPipeOut_first;
  wire [275 : 0] transportLayer_srvPortMetaData_response_get;
  wire [221 : 0] transportLayer_workCompPipeOutSQ_first;
  wire [169 : 0] transportLayer_dmaReadClt_request_get;
  wire transportLayer_EN_dmaReadClt_request_get,
       transportLayer_EN_dmaReadClt_response_put,
       transportLayer_EN_rdmaDataStreamInput_put,
       transportLayer_EN_rdmaDataStreamPipeOut_deq,
       transportLayer_EN_srvPortMetaData_request_put,
       transportLayer_EN_srvPortMetaData_response_get,
       transportLayer_EN_workCompPipeOutSQ_deq,
       transportLayer_EN_workReqInput_put,
       transportLayer_RDY_dmaReadClt_request_get,
       transportLayer_RDY_dmaReadClt_response_put,
       transportLayer_RDY_rdmaDataStreamInput_put,
       transportLayer_RDY_rdmaDataStreamPipeOut_deq,
       transportLayer_RDY_rdmaDataStreamPipeOut_first,
       transportLayer_RDY_srvPortMetaData_request_put,
       transportLayer_RDY_srvPortMetaData_response_get,
       transportLayer_RDY_workCompPipeOutSQ_deq,
       transportLayer_RDY_workCompPipeOutSQ_first,
       transportLayer_RDY_workReqInput_put;

  // rule scheduling signals
  wire CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passReady,
       CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passWire,
       CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_rawBus_passData,
       CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passReady,
       CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passWire,
       CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_rawBus_passData,
       CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passReady,
       CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passWire,
       CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_rawBus_passData,
       CAN_FIRE_RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passReady,
       CAN_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passWire,
       CAN_FIRE_RL_rawWorkReqSlv_rawBus_mkConnectionGetPut,
       CAN_FIRE_RL_rawWorkReqSlv_rawBus_rawBus_passData,
       CAN_FIRE_rawDmaReadCltStreamIn_validData,
       CAN_FIRE_rawDmaReadCltStreamOut_ready,
       CAN_FIRE_rawMetaDataStreamIn_validData,
       CAN_FIRE_rawMetaDataStreamOut_ready,
       CAN_FIRE_rawRdmaDataStreamIn_validData,
       CAN_FIRE_rawRdmaDataStreamOut_ready,
       CAN_FIRE_rawWorkCompSQOut_ready,
       CAN_FIRE_rawWorkReqIn_validData,
       WILL_FIRE_RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passReady,
       WILL_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passWire,
       WILL_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_rawBus_passData,
       WILL_FIRE_RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passReady,
       WILL_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passWire,
       WILL_FIRE_RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawMetaDataStreamSlv_rawBus_rawBus_passData,
       WILL_FIRE_RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passReady,
       WILL_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passWire,
       WILL_FIRE_RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawRdmaDataStreamSlv_rawBus_rawBus_passData,
       WILL_FIRE_RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passReady,
       WILL_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passWire,
       WILL_FIRE_RL_rawWorkReqSlv_rawBus_mkConnectionGetPut,
       WILL_FIRE_RL_rawWorkReqSlv_rawBus_rawBus_passData,
       WILL_FIRE_rawDmaReadCltStreamIn_validData,
       WILL_FIRE_rawDmaReadCltStreamOut_ready,
       WILL_FIRE_rawMetaDataStreamIn_validData,
       WILL_FIRE_rawMetaDataStreamOut_ready,
       WILL_FIRE_rawRdmaDataStreamIn_validData,
       WILL_FIRE_rawRdmaDataStreamOut_ready,
       WILL_FIRE_rawWorkCompSQOut_ready,
       WILL_FIRE_rawWorkReqIn_validData;

  // action method rawWorkReqIn_validData
  assign CAN_FIRE_rawWorkReqIn_validData = 1'd1 ;
  assign WILL_FIRE_rawWorkReqIn_validData = 1'd1 ;

  // value method rawWorkReqIn_ready
  assign s_work_req_ready = rawWorkReqSlv_rawBus_fifo_FULL_N ;

  // action method rawRdmaDataStreamIn_validData
  assign CAN_FIRE_rawRdmaDataStreamIn_validData = 1'd1 ;
  assign WILL_FIRE_rawRdmaDataStreamIn_validData = 1'd1 ;

  // value method rawRdmaDataStreamIn_ready
  assign s_data_stream_tready = rawRdmaDataStreamSlv_rawBus_fifo_FULL_N ;

  // value method rawRdmaDataStreamOut_valid
  assign m_data_stream_tvalid = rawRdmaDataStreamMst_rawBus_fifo_EMPTY_N ;

  // value method rawRdmaDataStreamOut_data
  assign m_data_stream_tdata =
	     rawRdmaDataStreamMst_rawBus_fifo_D_OUT[289:34] ;

  // value method rawRdmaDataStreamOut_byteEn
  assign m_data_stream_tkeep = rawRdmaDataStreamMst_rawBus_fifo_D_OUT[33:2] ;

  // value method rawRdmaDataStreamOut_isFirst
  assign m_data_stream_tfirst = rawRdmaDataStreamMst_rawBus_fifo_D_OUT[1] ;

  // value method rawRdmaDataStreamOut_isLast
  assign m_data_stream_tlast = rawRdmaDataStreamMst_rawBus_fifo_D_OUT[0] ;

  // action method rawRdmaDataStreamOut_ready
  assign CAN_FIRE_rawRdmaDataStreamOut_ready = 1'd1 ;
  assign WILL_FIRE_rawRdmaDataStreamOut_ready = 1'd1 ;

  // value method rawWorkCompSQOut_valid
  assign m_work_comp_sq_valid = rawWorkCompSQMst_rawBus_fifo_EMPTY_N ;

  // value method rawWorkCompSQOut_id
  assign m_work_comp_sq_id = rawWorkCompSQMst_rawBus_fifo_D_OUT[221:158] ;

  // value method rawWorkCompSQOut_opcode
  assign m_work_comp_sq_op_code =
	     rawWorkCompSQMst_rawBus_fifo_D_OUT[157:150] ;

  // value method rawWorkCompSQOut_flags
  assign m_work_comp_sq_flags = rawWorkCompSQMst_rawBus_fifo_D_OUT[149:143] ;

  // value method rawWorkCompSQOut_status
  assign m_work_comp_sq_status = rawWorkCompSQMst_rawBus_fifo_D_OUT[142:138] ;

  // value method rawWorkCompSQOut_len
  assign m_work_comp_sq_len = rawWorkCompSQMst_rawBus_fifo_D_OUT[137:106] ;

  // value method rawWorkCompSQOut_pKey
  assign m_work_comp_sq_pkey = rawWorkCompSQMst_rawBus_fifo_D_OUT[105:90] ;

  // value method rawWorkCompSQOut_qpn
  assign m_work_comp_sq_qpn = rawWorkCompSQMst_rawBus_fifo_D_OUT[89:66] ;

  // value method rawWorkCompSQOut_immDt
  assign m_work_comp_sq_imm_dt = rawWorkCompSQMst_rawBus_fifo_D_OUT[65:33] ;

  // value method rawWorkCompSQOut_rkey2Inv
  assign m_work_comp_sq_rkey_to_inv =
	     rawWorkCompSQMst_rawBus_fifo_D_OUT[32:0] ;

  // action method rawWorkCompSQOut_ready
  assign CAN_FIRE_rawWorkCompSQOut_ready = 1'd1 ;
  assign WILL_FIRE_rawWorkCompSQOut_ready = 1'd1 ;

  // action method rawMetaDataStreamIn_validData
  assign CAN_FIRE_rawMetaDataStreamIn_validData = 1'd1 ;
  assign WILL_FIRE_rawMetaDataStreamIn_validData = 1'd1 ;

  // value method rawMetaDataStreamIn_ready
  assign s_meta_data_tready = rawMetaDataStreamSlv_rawBus_fifo_FULL_N ;

  // value method rawMetaDataStreamOut_valid
  assign m_meta_data_tvalid = rawMetaDataStreamMst_rawBus_fifo_EMPTY_N ;

  // value method rawMetaDataStreamOut_metaDataResp
  assign m_meta_data_tdata = rawMetaDataStreamMst_rawBus_fifo_D_OUT ;

  // action method rawMetaDataStreamOut_ready
  assign CAN_FIRE_rawMetaDataStreamOut_ready = 1'd1 ;
  assign WILL_FIRE_rawMetaDataStreamOut_ready = 1'd1 ;

  // value method rawDmaReadCltStreamOut_valid
  assign m_dma_read_valid = rawDmaReadCltStreamMst_rawBus_fifo_EMPTY_N ;

  // value method rawDmaReadCltStreamOut_initiator
  assign m_dma_read_initiator =
	     rawDmaReadCltStreamMst_rawBus_fifo_D_OUT[169:166] ;

  // value method rawDmaReadCltStreamOut_sqpn
  assign m_dma_read_sqpn = rawDmaReadCltStreamMst_rawBus_fifo_D_OUT[165:142] ;

  // value method rawDmaReadCltStreamOut_wrID
  assign m_dma_read_wr_id = rawDmaReadCltStreamMst_rawBus_fifo_D_OUT[141:78] ;

  // value method rawDmaReadCltStreamOut_startAddr
  assign m_dma_read_start_addr =
	     rawDmaReadCltStreamMst_rawBus_fifo_D_OUT[77:14] ;

  // value method rawDmaReadCltStreamOut_len
  assign m_dma_read_len = rawDmaReadCltStreamMst_rawBus_fifo_D_OUT[13:1] ;

  // value method rawDmaReadCltStreamOut_mrIdx
  assign m_dma_read_mr_idx = rawDmaReadCltStreamMst_rawBus_fifo_D_OUT[0] ;

  // action method rawDmaReadCltStreamOut_ready
  assign CAN_FIRE_rawDmaReadCltStreamOut_ready = 1'd1 ;
  assign WILL_FIRE_rawDmaReadCltStreamOut_ready = 1'd1 ;

  // action method rawDmaReadCltStreamIn_validData
  assign CAN_FIRE_rawDmaReadCltStreamIn_validData = 1'd1 ;
  assign WILL_FIRE_rawDmaReadCltStreamIn_validData = 1'd1 ;

  // value method rawDmaReadCltStreamIn_ready
  assign s_dma_read_ready = rawDmaReadCltStreamSlv_rawBus_fifo_FULL_N ;

  // submodule rawDmaReadCltStreamMst_rawBus_fifo
  FIFO2 #(.width(32'd170),
	  .guarded(1'd1)) rawDmaReadCltStreamMst_rawBus_fifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(rawDmaReadCltStreamMst_rawBus_fifo_D_IN),
							     .ENQ(rawDmaReadCltStreamMst_rawBus_fifo_ENQ),
							     .DEQ(rawDmaReadCltStreamMst_rawBus_fifo_DEQ),
							     .CLR(rawDmaReadCltStreamMst_rawBus_fifo_CLR),
							     .D_OUT(rawDmaReadCltStreamMst_rawBus_fifo_D_OUT),
							     .FULL_N(rawDmaReadCltStreamMst_rawBus_fifo_FULL_N),
							     .EMPTY_N(rawDmaReadCltStreamMst_rawBus_fifo_EMPTY_N));

  // submodule rawDmaReadCltStreamSlv_rawBus_fifo
  FIFO2 #(.width(32'd383),
	  .guarded(1'd1)) rawDmaReadCltStreamSlv_rawBus_fifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(rawDmaReadCltStreamSlv_rawBus_fifo_D_IN),
							     .ENQ(rawDmaReadCltStreamSlv_rawBus_fifo_ENQ),
							     .DEQ(rawDmaReadCltStreamSlv_rawBus_fifo_DEQ),
							     .CLR(rawDmaReadCltStreamSlv_rawBus_fifo_CLR),
							     .D_OUT(rawDmaReadCltStreamSlv_rawBus_fifo_D_OUT),
							     .FULL_N(rawDmaReadCltStreamSlv_rawBus_fifo_FULL_N),
							     .EMPTY_N(rawDmaReadCltStreamSlv_rawBus_fifo_EMPTY_N));

  // submodule rawMetaDataStreamMst_rawBus_fifo
  FIFO2 #(.width(32'd276),
	  .guarded(1'd1)) rawMetaDataStreamMst_rawBus_fifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(rawMetaDataStreamMst_rawBus_fifo_D_IN),
							   .ENQ(rawMetaDataStreamMst_rawBus_fifo_ENQ),
							   .DEQ(rawMetaDataStreamMst_rawBus_fifo_DEQ),
							   .CLR(rawMetaDataStreamMst_rawBus_fifo_CLR),
							   .D_OUT(rawMetaDataStreamMst_rawBus_fifo_D_OUT),
							   .FULL_N(rawMetaDataStreamMst_rawBus_fifo_FULL_N),
							   .EMPTY_N(rawMetaDataStreamMst_rawBus_fifo_EMPTY_N));

  // submodule rawMetaDataStreamSlv_rawBus_fifo
  FIFO2 #(.width(32'd303),
	  .guarded(1'd1)) rawMetaDataStreamSlv_rawBus_fifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(rawMetaDataStreamSlv_rawBus_fifo_D_IN),
							   .ENQ(rawMetaDataStreamSlv_rawBus_fifo_ENQ),
							   .DEQ(rawMetaDataStreamSlv_rawBus_fifo_DEQ),
							   .CLR(rawMetaDataStreamSlv_rawBus_fifo_CLR),
							   .D_OUT(rawMetaDataStreamSlv_rawBus_fifo_D_OUT),
							   .FULL_N(rawMetaDataStreamSlv_rawBus_fifo_FULL_N),
							   .EMPTY_N(rawMetaDataStreamSlv_rawBus_fifo_EMPTY_N));

  // submodule rawRdmaDataStreamMst_rawBus_fifo
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) rawRdmaDataStreamMst_rawBus_fifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(rawRdmaDataStreamMst_rawBus_fifo_D_IN),
							   .ENQ(rawRdmaDataStreamMst_rawBus_fifo_ENQ),
							   .DEQ(rawRdmaDataStreamMst_rawBus_fifo_DEQ),
							   .CLR(rawRdmaDataStreamMst_rawBus_fifo_CLR),
							   .D_OUT(rawRdmaDataStreamMst_rawBus_fifo_D_OUT),
							   .FULL_N(rawRdmaDataStreamMst_rawBus_fifo_FULL_N),
							   .EMPTY_N(rawRdmaDataStreamMst_rawBus_fifo_EMPTY_N));

  // submodule rawRdmaDataStreamSlv_rawBus_fifo
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) rawRdmaDataStreamSlv_rawBus_fifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(rawRdmaDataStreamSlv_rawBus_fifo_D_IN),
							   .ENQ(rawRdmaDataStreamSlv_rawBus_fifo_ENQ),
							   .DEQ(rawRdmaDataStreamSlv_rawBus_fifo_DEQ),
							   .CLR(rawRdmaDataStreamSlv_rawBus_fifo_CLR),
							   .D_OUT(rawRdmaDataStreamSlv_rawBus_fifo_D_OUT),
							   .FULL_N(rawRdmaDataStreamSlv_rawBus_fifo_FULL_N),
							   .EMPTY_N(rawRdmaDataStreamSlv_rawBus_fifo_EMPTY_N));

  // submodule rawWorkCompSQMst_rawBus_fifo
  FIFO2 #(.width(32'd222),
	  .guarded(1'd1)) rawWorkCompSQMst_rawBus_fifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(rawWorkCompSQMst_rawBus_fifo_D_IN),
						       .ENQ(rawWorkCompSQMst_rawBus_fifo_ENQ),
						       .DEQ(rawWorkCompSQMst_rawBus_fifo_DEQ),
						       .CLR(rawWorkCompSQMst_rawBus_fifo_CLR),
						       .D_OUT(rawWorkCompSQMst_rawBus_fifo_D_OUT),
						       .FULL_N(rawWorkCompSQMst_rawBus_fifo_FULL_N),
						       .EMPTY_N(rawWorkCompSQMst_rawBus_fifo_EMPTY_N));

  // submodule rawWorkReqSlv_rawBus_fifo
  FIFO2 #(.width(32'd601),
	  .guarded(1'd1)) rawWorkReqSlv_rawBus_fifo(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(rawWorkReqSlv_rawBus_fifo_D_IN),
						    .ENQ(rawWorkReqSlv_rawBus_fifo_ENQ),
						    .DEQ(rawWorkReqSlv_rawBus_fifo_DEQ),
						    .CLR(rawWorkReqSlv_rawBus_fifo_CLR),
						    .D_OUT(rawWorkReqSlv_rawBus_fifo_D_OUT),
						    .FULL_N(rawWorkReqSlv_rawBus_fifo_FULL_N),
						    .EMPTY_N(rawWorkReqSlv_rawBus_fifo_EMPTY_N));

  // submodule transportLayer
  mkTransportLayer transportLayer(.CLK(CLK),
				  .RST_N(RST_N),
				  .dmaReadClt_response_put(transportLayer_dmaReadClt_response_put),
				  .rdmaDataStreamInput_put(transportLayer_rdmaDataStreamInput_put),
				  .srvPortMetaData_request_put(transportLayer_srvPortMetaData_request_put),
				  .workReqInput_put(transportLayer_workReqInput_put),
				  .EN_workReqInput_put(transportLayer_EN_workReqInput_put),
				  .EN_rdmaDataStreamInput_put(transportLayer_EN_rdmaDataStreamInput_put),
				  .EN_rdmaDataStreamPipeOut_deq(transportLayer_EN_rdmaDataStreamPipeOut_deq),
				  .EN_workCompPipeOutSQ_deq(transportLayer_EN_workCompPipeOutSQ_deq),
				  .EN_srvPortMetaData_request_put(transportLayer_EN_srvPortMetaData_request_put),
				  .EN_srvPortMetaData_response_get(transportLayer_EN_srvPortMetaData_response_get),
				  .EN_dmaReadClt_request_get(transportLayer_EN_dmaReadClt_request_get),
				  .EN_dmaReadClt_response_put(transportLayer_EN_dmaReadClt_response_put),
				  .RDY_workReqInput_put(transportLayer_RDY_workReqInput_put),
				  .RDY_rdmaDataStreamInput_put(transportLayer_RDY_rdmaDataStreamInput_put),
				  .rdmaDataStreamPipeOut_first(transportLayer_rdmaDataStreamPipeOut_first),
				  .RDY_rdmaDataStreamPipeOut_first(transportLayer_RDY_rdmaDataStreamPipeOut_first),
				  .RDY_rdmaDataStreamPipeOut_deq(transportLayer_RDY_rdmaDataStreamPipeOut_deq),
				  .rdmaDataStreamPipeOut_notEmpty(),
				  .RDY_rdmaDataStreamPipeOut_notEmpty(),
				  .workCompPipeOutSQ_first(transportLayer_workCompPipeOutSQ_first),
				  .RDY_workCompPipeOutSQ_first(transportLayer_RDY_workCompPipeOutSQ_first),
				  .RDY_workCompPipeOutSQ_deq(transportLayer_RDY_workCompPipeOutSQ_deq),
				  .workCompPipeOutSQ_notEmpty(),
				  .RDY_workCompPipeOutSQ_notEmpty(),
				  .RDY_srvPortMetaData_request_put(transportLayer_RDY_srvPortMetaData_request_put),
				  .srvPortMetaData_response_get(transportLayer_srvPortMetaData_response_get),
				  .RDY_srvPortMetaData_response_get(transportLayer_RDY_srvPortMetaData_response_get),
				  .dmaReadClt_request_get(transportLayer_dmaReadClt_request_get),
				  .RDY_dmaReadClt_request_get(transportLayer_RDY_dmaReadClt_request_get),
				  .RDY_dmaReadClt_response_put(transportLayer_RDY_dmaReadClt_response_put));

  // rule RL_rawWorkReqSlv_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawWorkReqSlv_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_workReqInput_put &&
	     rawWorkReqSlv_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawWorkReqSlv_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawWorkReqSlv_rawBus_mkConnectionGetPut ;

  // rule RL_rawWorkReqSlv_rawBus_rawBus_passData
  assign CAN_FIRE_RL_rawWorkReqSlv_rawBus_rawBus_passData =
	     rawWorkReqSlv_rawBus_fifo_FULL_N && s_work_req_valid ;
  assign WILL_FIRE_RL_rawWorkReqSlv_rawBus_rawBus_passData =
	     CAN_FIRE_RL_rawWorkReqSlv_rawBus_rawBus_passData ;

  // rule RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_rdmaDataStreamInput_put &&
	     rawRdmaDataStreamSlv_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut ;

  // rule RL_rawRdmaDataStreamSlv_rawBus_rawBus_passData
  assign CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_rawBus_passData =
	     rawRdmaDataStreamSlv_rawBus_fifo_FULL_N && s_data_stream_tvalid ;
  assign WILL_FIRE_RL_rawRdmaDataStreamSlv_rawBus_rawBus_passData =
	     CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_rawBus_passData ;

  // rule RL_rawRdmaDataStreamMst_rawBus_rawBus_passWire
  assign CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passWire =
	     rawRdmaDataStreamMst_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passWire =
	     rawRdmaDataStreamMst_rawBus_fifo_EMPTY_N ;

  // rule RL_rawRdmaDataStreamMst_rawBus_rawBus_passReady
  assign CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passReady =
	     rawRdmaDataStreamMst_rawBus_fifo_EMPTY_N &&
	     m_data_stream_tready ;
  assign WILL_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passReady =
	     CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passReady ;

  // rule RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_rdmaDataStreamPipeOut_deq &&
	     transportLayer_RDY_rdmaDataStreamPipeOut_first &&
	     rawRdmaDataStreamMst_rawBus_fifo_FULL_N ;
  assign WILL_FIRE_RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut ;

  // rule RL_rawWorkCompSQMst_rawBus_rawBus_passWire
  assign CAN_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passWire =
	     rawWorkCompSQMst_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passWire =
	     rawWorkCompSQMst_rawBus_fifo_EMPTY_N ;

  // rule RL_rawWorkCompSQMst_rawBus_rawBus_passReady
  assign CAN_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passReady =
	     rawWorkCompSQMst_rawBus_fifo_EMPTY_N && m_work_comp_sq_ready ;
  assign WILL_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passReady =
	     CAN_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passReady ;

  // rule RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_workCompPipeOutSQ_deq &&
	     transportLayer_RDY_workCompPipeOutSQ_first &&
	     rawWorkCompSQMst_rawBus_fifo_FULL_N ;
  assign WILL_FIRE_RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut ;

  // rule RL_rawMetaDataStreamMst_rawBus_rawBus_passWire
  assign CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passWire =
	     rawMetaDataStreamMst_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passWire =
	     rawMetaDataStreamMst_rawBus_fifo_EMPTY_N ;

  // rule RL_rawMetaDataStreamMst_rawBus_rawBus_passReady
  assign CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passReady =
	     rawMetaDataStreamMst_rawBus_fifo_EMPTY_N && m_meta_data_tready ;
  assign WILL_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passReady =
	     CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passReady ;

  // rule RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_srvPortMetaData_response_get &&
	     rawMetaDataStreamMst_rawBus_fifo_FULL_N ;
  assign WILL_FIRE_RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut ;

  // rule RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_srvPortMetaData_request_put &&
	     rawMetaDataStreamSlv_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut ;

  // rule RL_rawMetaDataStreamSlv_rawBus_rawBus_passData
  assign CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_rawBus_passData =
	     rawMetaDataStreamSlv_rawBus_fifo_FULL_N && s_meta_data_tvalid ;
  assign WILL_FIRE_RL_rawMetaDataStreamSlv_rawBus_rawBus_passData =
	     CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_rawBus_passData ;

  // rule RL_rawDmaReadCltStreamMst_rawBus_rawBus_passWire
  assign CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passWire =
	     rawDmaReadCltStreamMst_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passWire =
	     rawDmaReadCltStreamMst_rawBus_fifo_EMPTY_N ;

  // rule RL_rawDmaReadCltStreamMst_rawBus_rawBus_passReady
  assign CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passReady =
	     rawDmaReadCltStreamMst_rawBus_fifo_EMPTY_N && m_dma_read_ready ;
  assign WILL_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passReady =
	     CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passReady ;

  // rule RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_dmaReadClt_request_get &&
	     rawDmaReadCltStreamMst_rawBus_fifo_FULL_N ;
  assign WILL_FIRE_RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut ;

  // rule RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut
  assign CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut =
	     transportLayer_RDY_dmaReadClt_response_put &&
	     rawDmaReadCltStreamSlv_rawBus_fifo_EMPTY_N ;
  assign WILL_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut =
	     CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut ;

  // rule RL_rawDmaReadCltStreamSlv_rawBus_rawBus_passData
  assign CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_rawBus_passData =
	     rawDmaReadCltStreamSlv_rawBus_fifo_FULL_N && s_dma_read_valid ;
  assign WILL_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_rawBus_passData =
	     CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_rawBus_passData ;

  // inlined wires
  assign rawRdmaDataStreamMst_rawBus_rawBus_dataW_wget =
	     rawRdmaDataStreamMst_rawBus_fifo_D_OUT ;
  assign rawRdmaDataStreamMst_rawBus_rawBus_dataW_whas =
	     rawRdmaDataStreamMst_rawBus_fifo_EMPTY_N ;
  assign rawWorkCompSQMst_rawBus_rawBus_dataW_wget =
	     rawWorkCompSQMst_rawBus_fifo_D_OUT ;
  assign rawWorkCompSQMst_rawBus_rawBus_dataW_whas =
	     rawWorkCompSQMst_rawBus_fifo_EMPTY_N ;
  assign rawMetaDataStreamMst_rawBus_rawBus_dataW_wget =
	     rawMetaDataStreamMst_rawBus_fifo_D_OUT ;
  assign rawMetaDataStreamMst_rawBus_rawBus_dataW_whas =
	     rawMetaDataStreamMst_rawBus_fifo_EMPTY_N ;
  assign rawDmaReadCltStreamMst_rawBus_rawBus_dataW_wget =
	     rawDmaReadCltStreamMst_rawBus_fifo_D_OUT ;
  assign rawDmaReadCltStreamMst_rawBus_rawBus_dataW_whas =
	     rawDmaReadCltStreamMst_rawBus_fifo_EMPTY_N ;
  assign rawWorkReqSlv_rawBus_rawBus_validW_wget = s_work_req_valid ;
  assign rawWorkReqSlv_rawBus_rawBus_dataW_wget =
	     { s_work_req_id,
	       s_work_req_op_code,
	       s_work_req_flags,
	       s_work_req_raddr,
	       s_work_req_rkey,
	       s_work_req_len,
	       s_work_req_laddr,
	       s_work_req_lkey,
	       s_work_req_sqpn,
	       s_work_req_solicited,
	       s_work_req_comp,
	       s_work_req_swap,
	       s_work_req_imm_dt,
	       s_work_req_rkey_to_inv,
	       s_work_req_srqn,
	       s_work_req_dqpn,
	       s_work_req_qkey } ;
  assign rawRdmaDataStreamSlv_rawBus_rawBus_validW_wget =
	     s_data_stream_tvalid ;
  assign rawRdmaDataStreamSlv_rawBus_rawBus_dataW_wget =
	     { s_data_stream_tdata,
	       s_data_stream_tkeep,
	       s_data_stream_tfirst,
	       s_data_stream_tlast } ;
  assign rawRdmaDataStreamMst_rawBus_rawBus_readyW_wget =
	     m_data_stream_tready ;
  assign rawWorkCompSQMst_rawBus_rawBus_readyW_wget = m_work_comp_sq_ready ;
  assign rawMetaDataStreamMst_rawBus_rawBus_readyW_wget = m_meta_data_tready ;
  assign rawMetaDataStreamSlv_rawBus_rawBus_validW_wget = s_meta_data_tvalid ;
  assign rawMetaDataStreamSlv_rawBus_rawBus_dataW_wget = s_meta_data_tdata ;
  assign rawDmaReadCltStreamMst_rawBus_rawBus_readyW_wget = m_dma_read_ready ;
  assign rawDmaReadCltStreamSlv_rawBus_rawBus_validW_wget = s_dma_read_valid ;
  assign rawDmaReadCltStreamSlv_rawBus_rawBus_dataW_wget =
	     { s_dma_read_initiator,
	       s_dma_read_sqpn,
	       s_dma_read_wr_id,
	       s_dma_read_is_resp_err,
	       s_dma_read_data_stream } ;

  // submodule rawDmaReadCltStreamMst_rawBus_fifo
  assign rawDmaReadCltStreamMst_rawBus_fifo_D_IN =
	     transportLayer_dmaReadClt_request_get ;
  assign rawDmaReadCltStreamMst_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut ;
  assign rawDmaReadCltStreamMst_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_rawBus_passReady ;
  assign rawDmaReadCltStreamMst_rawBus_fifo_CLR = 1'b0 ;

  // submodule rawDmaReadCltStreamSlv_rawBus_fifo
  assign rawDmaReadCltStreamSlv_rawBus_fifo_D_IN =
	     rawDmaReadCltStreamSlv_rawBus_rawBus_dataW_wget ;
  assign rawDmaReadCltStreamSlv_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_rawBus_passData ;
  assign rawDmaReadCltStreamSlv_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut ;
  assign rawDmaReadCltStreamSlv_rawBus_fifo_CLR = 1'b0 ;

  // submodule rawMetaDataStreamMst_rawBus_fifo
  always@(transportLayer_srvPortMetaData_response_get)
  begin
    case (transportLayer_srvPortMetaData_response_get[275:274])
      2'd0, 2'd1, 2'd2:
	  rawMetaDataStreamMst_rawBus_fifo_D_IN =
	      transportLayer_srvPortMetaData_response_get;
      2'd3:
	  rawMetaDataStreamMst_rawBus_fifo_D_IN =
	      276'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    endcase
  end
  assign rawMetaDataStreamMst_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut ;
  assign rawMetaDataStreamMst_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_rawBus_passReady ;
  assign rawMetaDataStreamMst_rawBus_fifo_CLR = 1'b0 ;

  // submodule rawMetaDataStreamSlv_rawBus_fifo
  assign rawMetaDataStreamSlv_rawBus_fifo_D_IN = s_meta_data_tdata ;
  assign rawMetaDataStreamSlv_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_rawBus_passData ;
  assign rawMetaDataStreamSlv_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut ;
  assign rawMetaDataStreamSlv_rawBus_fifo_CLR = 1'b0 ;

  // submodule rawRdmaDataStreamMst_rawBus_fifo
  assign rawRdmaDataStreamMst_rawBus_fifo_D_IN =
	     transportLayer_rdmaDataStreamPipeOut_first ;
  assign rawRdmaDataStreamMst_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut ;
  assign rawRdmaDataStreamMst_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_rawBus_passReady ;
  assign rawRdmaDataStreamMst_rawBus_fifo_CLR = 1'b0 ;

  // submodule rawRdmaDataStreamSlv_rawBus_fifo
  assign rawRdmaDataStreamSlv_rawBus_fifo_D_IN =
	     rawRdmaDataStreamSlv_rawBus_rawBus_dataW_wget ;
  assign rawRdmaDataStreamSlv_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_rawBus_passData ;
  assign rawRdmaDataStreamSlv_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut ;
  assign rawRdmaDataStreamSlv_rawBus_fifo_CLR = 1'b0 ;

  // submodule rawWorkCompSQMst_rawBus_fifo
  assign rawWorkCompSQMst_rawBus_fifo_D_IN =
	     transportLayer_workCompPipeOutSQ_first ;
  assign rawWorkCompSQMst_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut ;
  assign rawWorkCompSQMst_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawWorkCompSQMst_rawBus_rawBus_passReady ;
  assign rawWorkCompSQMst_rawBus_fifo_CLR = 1'b0 ;

  // submodule rawWorkReqSlv_rawBus_fifo
  assign rawWorkReqSlv_rawBus_fifo_D_IN =
	     rawWorkReqSlv_rawBus_rawBus_dataW_wget ;
  assign rawWorkReqSlv_rawBus_fifo_ENQ =
	     CAN_FIRE_RL_rawWorkReqSlv_rawBus_rawBus_passData ;
  assign rawWorkReqSlv_rawBus_fifo_DEQ =
	     CAN_FIRE_RL_rawWorkReqSlv_rawBus_mkConnectionGetPut ;
  assign rawWorkReqSlv_rawBus_fifo_CLR = 1'b0 ;

  // submodule transportLayer
  assign transportLayer_dmaReadClt_response_put =
	     rawDmaReadCltStreamSlv_rawBus_fifo_D_OUT ;
  assign transportLayer_rdmaDataStreamInput_put =
	     rawRdmaDataStreamSlv_rawBus_fifo_D_OUT ;
  assign transportLayer_srvPortMetaData_request_put =
	     rawMetaDataStreamSlv_rawBus_fifo_D_OUT ;
  assign transportLayer_workReqInput_put = rawWorkReqSlv_rawBus_fifo_D_OUT ;
  assign transportLayer_EN_workReqInput_put =
	     CAN_FIRE_RL_rawWorkReqSlv_rawBus_mkConnectionGetPut ;
  assign transportLayer_EN_rdmaDataStreamInput_put =
	     CAN_FIRE_RL_rawRdmaDataStreamSlv_rawBus_mkConnectionGetPut ;
  assign transportLayer_EN_rdmaDataStreamPipeOut_deq =
	     CAN_FIRE_RL_rawRdmaDataStreamMst_rawBus_mkConnectionGetPut ;
  assign transportLayer_EN_workCompPipeOutSQ_deq =
	     CAN_FIRE_RL_rawWorkCompSQMst_rawBus_mkConnectionGetPut ;
  assign transportLayer_EN_srvPortMetaData_request_put =
	     CAN_FIRE_RL_rawMetaDataStreamSlv_rawBus_mkConnectionGetPut ;
  assign transportLayer_EN_srvPortMetaData_response_get =
	     CAN_FIRE_RL_rawMetaDataStreamMst_rawBus_mkConnectionGetPut ;
  assign transportLayer_EN_dmaReadClt_request_get =
	     CAN_FIRE_RL_rawDmaReadCltStreamMst_rawBus_mkConnectionGetPut ;
  assign transportLayer_EN_dmaReadClt_response_put =
	     CAN_FIRE_RL_rawDmaReadCltStreamSlv_rawBus_mkConnectionGetPut ;
endmodule  // mkAxiSTransportLayer

