<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>xilinx.com</spirit:vendor>
  <spirit:library>customized_ip</spirit:library>
  <spirit:name>GigEthGtx7Core</spirit:name>
  <spirit:version>1.0</spirit:version>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>mdio_pcs_pma</spirit:name>
      <spirit:displayName>mdio_pcs_pma</spirit:displayName>
      <spirit:description>MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_pcs_pma" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and (not ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mdio_pcs_pma_0</spirit:name>
      <spirit:displayName>mdio_pcs_pma_0</spirit:displayName>
      <spirit:description>MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_pcs_pma_0" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mdio_pcs_pma_1</spirit:name>
      <spirit:displayName>mdio_pcs_pma_1</spirit:displayName>
      <spirit:description>MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_pcs_pma_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mdio_pcs_pma_2</spirit:name>
      <spirit:displayName>mdio_pcs_pma_2</spirit:displayName>
      <spirit:description>MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_pcs_pma_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ext_mdio_pcs_pma</spirit:name>
      <spirit:displayName>ext_mdio_pcs_pma</spirit:displayName>
      <spirit:description>External MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdc</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_t</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.EXT_MDIO_PCS_PMA.BOARD.ASSOCIATED_PARAM">MDIO_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ext_mdio_pcs_pma" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;))) and (not((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ext_mdio_pcs_pma_0</spirit:name>
      <spirit:displayName>ext_mdio_pcs_pma_0</spirit:displayName>
      <spirit:description>External MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdc_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_i_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_o_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_t_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.EXT_MDIO_PCS_PMA_0.BOARD.ASSOCIATED_PARAM">MDIO_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ext_mdio_pcs_pma_0" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ext_mdio_pcs_pma_1</spirit:name>
      <spirit:displayName>ext_mdio_pcs_pma_1</spirit:displayName>
      <spirit:description>External MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdc_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_i_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_o_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_t_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.EXT_MDIO_PCS_PMA_1.BOARD.ASSOCIATED_PARAM">MDIO_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ext_mdio_pcs_pma_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ext_mdio_pcs_pma_2</spirit:name>
      <spirit:displayName>ext_mdio_pcs_pma_2</spirit:displayName>
      <spirit:description>External MDIO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdc_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_i_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_o_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ext_mdio_t_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.EXT_MDIO_PCS_PMA_2.BOARD.ASSOCIATED_PARAM">MDIO_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ext_mdio_pcs_pma_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_pcs_pma</spirit:name>
      <spirit:displayName>gmii_pcs_pma</spirit:displayName>
      <spirit:description>GMII</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_pcs_pma" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true())) and (not((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_pcs_pma_0</spirit:name>
      <spirit:displayName>gmii_pcs_pma_0</spirit:displayName>
      <spirit:description>GMII</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_pcs_pma_0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_pcs_pma_1</spirit:name>
      <spirit:displayName>gmii_pcs_pma_1</spirit:displayName>
      <spirit:description>GMII</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_pcs_pma_1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_pcs_pma_2</spirit:name>
      <spirit:displayName>gmii_pcs_pma_2</spirit:displayName>
      <spirit:description>GMII</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_pcs_pma_2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_gem_pcs_pma</spirit:name>
      <spirit:displayName>gmii_gem_pcs_pma</spirit:displayName>
      <spirit:description>GMII</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_gem_pcs_pma" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))= false())  and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sfp</spirit:name>
      <spirit:displayName>sfp</spirit:displayName>
      <spirit:description>SFP Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SFP.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sfp" xilinx:dependency="(not (spirit:decode(id(PARAM_VALUE.Standard))=&quot;SGMII&quot;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sfp_0</spirit:name>
      <spirit:displayName>sfp_0</spirit:displayName>
      <spirit:description>SFP Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SFP_0.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sfp_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false()))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sfp_1</spirit:name>
      <spirit:displayName>sfp_1</spirit:displayName>
      <spirit:description>SFP Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SFP_1.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sfp_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false()))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sfp_2</spirit:name>
      <spirit:displayName>sfp_2</spirit:displayName>
      <spirit:description>SFP Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SFP_2.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sfp_2" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false()))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii</spirit:name>
      <spirit:displayName>sgmii</spirit:displayName>
      <spirit:description>SGMII Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sgmii_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SGMII.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii" xilinx:dependency="(spirit:decode(id(PARAM_VALUE.Standard))=&quot;SGMII&quot;) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_0</spirit:name>
      <spirit:displayName>sgmii_0</spirit:displayName>
      <spirit:description>SGMII Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sgmii_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SGMII_0.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_0" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_1</spirit:name>
      <spirit:displayName>sgmii_1</spirit:displayName>
      <spirit:description>SGMII Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sgmii_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SGMII_1.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_1" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_2</spirit:name>
      <spirit:displayName>sgmii_2</spirit:displayName>
      <spirit:description>SGMII Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sgmii_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SGMII_2.BOARD.ASSOCIATED_PARAM">ETHERNET_BOARD_INTERFACE</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>reset_port</spirit:name>
      <spirit:displayName>reset_port</spirit:displayName>
      <spirit:description>Asynchronous Reset</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rx_phy_reset_port</spirit:name>
      <spirit:displayName>rx_phy_reset_port</spirit:displayName>
      <spirit:description>Reset to RX phy components</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rx_phy_reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RX_PHY_RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rx_phy_reset_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rx_logic_reset_port</spirit:name>
      <spirit:displayName>rx_logic_reset_port</spirit:displayName>
      <spirit:description>Reset to fabric logic</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rx_logic_reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RX_LOGIC_RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rx_logic_reset_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>tx_phy_reset_port</spirit:name>
      <spirit:displayName>tx_phy_reset_port</spirit:displayName>
      <spirit:description>Reset to TX phy components</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>tx_phy_reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.TX_PHY_RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.tx_phy_reset_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rx_phy_dly_reset_port</spirit:name>
      <spirit:displayName>rx_phy_dly_reset_port</spirit:displayName>
      <spirit:description>Reset to RX phy delay components</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rx_phy_dly_reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RX_PHY_DLY_RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rx_phy_dly_reset_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>tx_phy_dly_reset_port</spirit:name>
      <spirit:displayName>tx_phy_dly_reset_port</spirit:displayName>
      <spirit:description>Reset to TX phy delay components</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>tx_phy_dly_reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.TX_PHY_DLY_RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.tx_phy_dly_reset_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>tx_pll_clk_port</spirit:name>
      <spirit:displayName>tx_pll_clk_port</spirit:displayName>
      <spirit:description>TX pll clock directly to txbitslice control</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>tx_pll_clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.tx_pll_clk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rx_pll_clk_port</spirit:name>
      <spirit:displayName>rx_pll_clk_port</spirit:displayName>
      <spirit:description>RX pll clock directly to rxbitslice control</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rx_pll_clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rx_pll_clk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_port</spirit:name>
      <spirit:displayName>an_interrupt_port</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_PORT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))  and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_port_0</spirit:name>
      <spirit:displayName>an_interrupt_port_0</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_PORT_0.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_port_0" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_port_1</spirit:name>
      <spirit:displayName>an_interrupt_port_1</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_PORT_1.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_port_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_port_2</spirit:name>
      <spirit:displayName>an_interrupt_port_2</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_PORT_2.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_port_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_0_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_0_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation for lane 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en_0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_0_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_1_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_1_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation  for lane 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en_1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_1_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_2_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_2_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation for lane 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en_2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_2_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>independent_clk_port</spirit:name>
      <spirit:displayName>independent_clk_port</spirit:displayName>
      <spirit:description>Freerunning clock refer to product guide for details</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>independent_clock_bufg</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLK_PORT.ASSOCIATED_RESET">pma_reset_out_port</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.independent_clk_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>independent_clock_port</spirit:name>
      <spirit:displayName>independent_clock_port</spirit:displayName>
      <spirit:description>Freerunning clock refer to product guide for details</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>independent_clock_bufg</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_PORT.ASSOCIATED_RESET">pma_reset_port</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.independent_clock_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pma_reset_port</spirit:name>
      <spirit:displayName>pma_reset_port</spirit:displayName>
      <spirit:description>Transceiver PMA reset signal</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pma_reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.PMA_RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pma_reset_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pma_reset_out_port</spirit:name>
      <spirit:displayName>pma_reset_out_port</spirit:displayName>
      <spirit:description>Reset port synchronized to independent clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pma_reset_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.PMA_RESET_OUT_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pma_reset_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk125m_port</spirit:name>
      <spirit:displayName>125Mhz clock port</spirit:displayName>
      <spirit:description>125Mhz clock derived from Synchronous 125Mhz differential clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk125m</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK125M_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK125M_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK125M_PORT.ASSOCIATED_RESET">reset_port</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk125m_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk625_port</spirit:name>
      <spirit:displayName>625Mhz clock port</spirit:displayName>
      <spirit:description>625Mhz clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk625</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK625_PORT.FREQ_HZ">625000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK625_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk625_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true())) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk208_port</spirit:name>
      <spirit:displayName>208Mhz clock port</spirit:displayName>
      <spirit:description>208Mhz clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk208</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK208_PORT.FREQ_HZ">208333333</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK208_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk208_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) ) )">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk312_port</spirit:name>
      <spirit:displayName>312Mhz clock port</spirit:displayName>
      <spirit:description>312Mhz clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk312</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK312_PORT.FREQ_HZ">312500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK312_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk312_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk104_port</spirit:name>
      <spirit:displayName>104Mhz clock port</spirit:displayName>
      <spirit:description>104Mhz clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk104</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK104_PORT.FREQ_HZ">104166666</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK104_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk104_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)) ))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk104_out_port</spirit:name>
      <spirit:displayName>104Mhz clock port</spirit:displayName>
      <spirit:description>104 Mhz out clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk104_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK104_OUT_PORT.FREQ_HZ">104166666</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK104_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk104_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk208_out_port</spirit:name>
      <spirit:displayName>208Mhz clock port</spirit:displayName>
      <spirit:description>208 Mhz out clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk208_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK208_OUT_PORT.FREQ_HZ">208333333</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK208_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk208_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;))) ))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk312_out_port</spirit:name>
      <spirit:displayName>312Mhz clock port</spirit:displayName>
      <spirit:description>312 Mhz out clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk312_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK312_OUT_PORT.FREQ_HZ">312500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK312_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk312_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk125_out_port</spirit:name>
      <spirit:displayName>125 Mhz clock port</spirit:displayName>
      <spirit:description>125 Mhz out clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk125_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK125_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK125_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK125_OUT_PORT.ASSOCIATED_RESET">rst_125_out_port</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk125_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk625_out_port</spirit:name>
      <spirit:displayName>625 Mhz clock port</spirit:displayName>
      <spirit:description>625 Mhz out clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk625_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK625_OUT_PORT.FREQ_HZ">625000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK625_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.clk625_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true())  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true()))  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rst_125_out_port</spirit:name>
      <spirit:displayName>rst_125_out_port</spirit:displayName>
      <spirit:description>Reset port synchronized to 125Mhz clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rst_125_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RST_125_OUT_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rst_125_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtx_clk_port</spirit:name>
      <spirit:displayName>gtx clock port</spirit:displayName>
      <spirit:description>gtx clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtx_clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtx_clk_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>refclk_port</spirit:name>
      <spirit:displayName>ref clock port</spirit:displayName>
      <spirit:description>reference clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>refclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.refclk_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pma_tx_clk_port</spirit:name>
      <spirit:displayName>pma tx clock port</spirit:displayName>
      <spirit:description>PMA transmit clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pma_tx_clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pma_tx_clk_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pma_rx_clk0_port</spirit:name>
      <spirit:displayName>pma rx clock port</spirit:displayName>
      <spirit:description>PMA recieve clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pma_rx_clk0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pma_rx_clk0_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtrefclk_port</spirit:name>
      <spirit:displayName>gt reference clock port</spirit:displayName>
      <spirit:description>GT reference clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtrefclk_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)) = true()))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtrefclk_bufg_port</spirit:name>
      <spirit:displayName>gtrefclk_bufg_port</spirit:displayName>
      <spirit:description>gtrefclk through a BUFG to drive fabric logic</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_bufg</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_BUFG_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_BUFG_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtrefclk_bufg_port" xilinx:dependency="((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)) = true())) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTXE2&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTHE2&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTPE2&quot;) ))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtrefclk_in</spirit:name>
      <spirit:displayName>gtrefclk_in</spirit:displayName>
      <spirit:description>GT reference clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_N</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_n</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_P</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_p</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>TYPE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_IN.TYPE">ETH_MGT_CLK</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_IN.BOARD.ASSOCIATED_PARAM">DIFFCLK_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtrefclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>refclk125_in</spirit:name>
      <spirit:displayName>differential reference clock port</spirit:displayName>
      <spirit:description>differential reference clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_N</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>refclk125_n</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_P</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>refclk125_p</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK125_IN.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>TYPE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK125_IN.TYPE">ETH_LVDS_CLK</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK125_IN.BOARD.ASSOCIATED_PARAM">DIFFCLK_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.refclk125_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;125&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>refclk156_25_in</spirit:name>
      <spirit:displayName>differential reference clock port</spirit:displayName>
      <spirit:description>differential reference clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_N</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>refclk156_25_n</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_P</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>refclk156_25_p</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK156_25_IN.FREQ_HZ">156250000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>TYPE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK156_25_IN.TYPE">ETH_LVDS_CLK</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK156_25_IN.BOARD.ASSOCIATED_PARAM">DIFFCLK_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.refclk156_25_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;156.25&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>refclk625_in</spirit:name>
      <spirit:displayName>differential reference clock port</spirit:displayName>
      <spirit:description>differential reference clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_N</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>refclk625_n</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_P</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>refclk625_p</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK625_IN.FREQ_HZ">625000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>TYPE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK625_IN.TYPE">ETH_LVDS_CLK</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.REFCLK625_IN.BOARD.ASSOCIATED_PARAM">DIFFCLK_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.refclk625_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;625&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtrefclk_out_port</spirit:name>
      <spirit:displayName>gtrefclk_out_port</spirit:displayName>
      <spirit:description>Reference clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and  (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtrefclk_bufg_out_port</spirit:name>
      <spirit:displayName>gtrefclk_bufg_out_port</spirit:displayName>
      <spirit:description>gtrefclk through a BUFG to drive fabric logic</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_bufg_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_BUFG_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_BUFG_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtrefclk_bufg_out_port" xilinx:dependency="((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and  (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))  and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTXE2&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTHE2&quot;))  or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTPE2&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>txoutclk_port</spirit:name>
      <spirit:displayName>txout clock port</spirit:displayName>
      <spirit:description>TX out clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txoutclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.txoutclk_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk_port</spirit:name>
      <spirit:displayName>user clock port</spirit:displayName>
      <spirit:description>userclock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk2_port</spirit:name>
      <spirit:displayName>user clock2 port</spirit:displayName>
      <spirit:description>user clock 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk2_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk_out_port</spirit:name>
      <spirit:displayName>userclk_out_port</spirit:displayName>
      <spirit:description>USERCLK port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk2_out_port</spirit:name>
      <spirit:displayName>userclk2_out_port</spirit:displayName>
      <spirit:description>USERCLK2 port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk2_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk2_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk_out_port</spirit:name>
      <spirit:displayName>rxuserclk_out_port</spirit:displayName>
      <spirit:description>RXUSERCLK port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk2_out_port</spirit:name>
      <spirit:displayName>rxuserclk2_out_port</spirit:displayName>
      <spirit:description>RXUSERCLK2 port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk2_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk2_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk_port</spirit:name>
      <spirit:displayName>rxuserclk_port</spirit:displayName>
      <spirit:description>rxuserclk clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>drpclk_port</spirit:name>
      <spirit:displayName>drpclk_port</spirit:displayName>
      <spirit:description>drpclk clock for drp interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.DRPCLK_PORT.ASSOCIATED_BUSIF">drp_interface</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.drpclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>drp_clk_port</spirit:name>
      <spirit:displayName>drpclk_port</spirit:displayName>
      <spirit:description>drpclk clock for drp interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.DRP_CLK_PORT.ASSOCIATED_BUSIF">gt_drp</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.drp_clk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;))  or  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk2_port</spirit:name>
      <spirit:displayName>rxuserclk2_port</spirit:displayName>
      <spirit:description>rxuserclk2 clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk2_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxoutclk_port</spirit:name>
      <spirit:displayName>rxout clock port</spirit:displayName>
      <spirit:description>rxout clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxoutclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.FREQ_HZ">62500000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxoutclk_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and  (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll0outclk_out_port</spirit:displayName>
      <spirit:description>PLL0 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outrefclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll0outrefclk_out_port</spirit:displayName>
      <spirit:description>PLL0 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll1outclk_out_port</spirit:displayName>
      <spirit:description>PLL1 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outrefclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll1outrefclk_out_port</spirit:displayName>
      <spirit:description>PLL1 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutclk_out_port</spirit:name>
      <spirit:displayName>gt0_qplloutclk_out_port</spirit:displayName>
      <spirit:description>PLL Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutrefclk_out_port</spirit:name>
      <spirit:displayName>gt0_qplloutrefclk_out_port</spirit:displayName>
      <spirit:description>PLL Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll0outclk_in_port</spirit:displayName>
      <spirit:description>PLL0 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;) ))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outrefclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll0outrefclk_in_port</spirit:displayName>
      <spirit:description>PLL0 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outrefclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outrefclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll1outclk_in_port</spirit:displayName>
      <spirit:description>PLL1 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outrefclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll1outrefclk_in_port</spirit:displayName>
      <spirit:description>PLL1 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outrefclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outrefclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0reset_out_port</spirit:name>
      <spirit:displayName>gt0_pll0reset_out_port</spirit:displayName>
      <spirit:description>Reset to GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0reset_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL0RESET_OUT_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0reset_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutclk_in_port</spirit:name>
      <spirit:displayName>gt0_qplloutclk_in_port</spirit:displayName>
      <spirit:description>PLL Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutrefclk_in_port</spirit:name>
      <spirit:displayName>gt0_qplloutrefclk_in_port</spirit:displayName>
      <spirit:description>PLL Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutrefclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutrefclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>drp_interface</spirit:name>
      <spirit:displayName>drp_interface</spirit:displayName>
      <spirit:description>DRP Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpaddr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpdi_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpdo_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drprdy_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpwe_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.drp_interface" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt_drp</spirit:name>
      <spirit:displayName>gt_drp</spirit:displayName>
      <spirit:description>DRP Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt_drp" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;))  or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug</spirit:name>
      <spirit:displayName>transceiver_debug</spirit:displayName>
      <spirit:description>Transceiver Debug Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_gig_ethernet_pcs_pma" spirit:name="gt_xcvr_debug_io" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_gig_ethernet_pcs_pma" spirit:name="gt_xcvr_debug_io_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxchariscomma</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxchariscomma_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcharisk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfeagcovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdfeagcovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdisperr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxnotintable_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmaresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpmaresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug_gtp</spirit:name>
      <spirit:displayName>transceiver_debug</spirit:displayName>
      <spirit:description>Transceiver Debug Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_gig_ethernet_pcs_pma" spirit:name="gt_xcvr_debug_io" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_gig_ethernet_pcs_pma" spirit:name="gt_xcvr_debug_io_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxchariscomma</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxchariscomma_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcharisk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdisperr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfoverden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmhfoverden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxnotintable_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmaresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpmaresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug_gtp" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) )">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug_ser8</spirit:name>
      <spirit:displayName>transceiver_debug</spirit:displayName>
      <spirit:description>Transceiver Debug Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_gig_ethernet_pcs_pma" spirit:name="gt_xcvr_debug_io" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_gig_ethernet_pcs_pma" spirit:name="gt_xcvr_debug_io_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cpllrefclksel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_cpllrefclksel</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_dmonitorout</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescandataerror</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescanreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescantrigger</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtrefclk1</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_gtrefclk1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_loopback</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>pcsrsvdin</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_pcsrsvdin</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbufreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbufstatus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxcdrhold</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxcommadet</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxdfelpmreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxlpmen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpcsreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpmareset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmaresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpmaresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpolarity</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbscntreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbserr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbssel</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxrate</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxrate</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txbufstatus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txdiffctrl</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txinhibit</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpcsreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpmareset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpolarity</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpostcursor</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprbsforceerr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprbssel</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprecursor</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug_ser8" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or  (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:model>
    <spirit:views>
      <spirit:view>
        <spirit:name>xilinx_elaboratesubcores</spirit:name>
        <spirit:displayName>Elaborate Sub-Cores</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:elaborate.subcores</spirit:envIdentifier>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>cce4da8a</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_vhdlinstantiationtemplate</spirit:name>
        <spirit:displayName>VHDL Instantiation Template</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:synthesis.template</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlinstantiationtemplate_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>cce4da8a</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:00:22 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagesynthesis</spirit:name>
        <spirit:displayName>Synthesis</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagesynthesis_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>cce4da8a</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:00:24 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_vhdlsynthesiswrapper</spirit:name>
        <spirit:displayName>VHDL Synthesis Wrapper</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:synthesis.wrapper</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlsynthesiswrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>cce4da8a</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:00:24 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagebehavioralsimulation</spirit:name>
        <spirit:displayName>Simulation</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:simulation</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>71710d8b</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:00:24 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_vhdlsimulationwrapper</spirit:name>
        <spirit:displayName>VHDL Simulation Wrapper</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:simulation.wrapper</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlsimulationwrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>71710d8b</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:00:24 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_implementation</spirit:name>
        <spirit:displayName>Implementation</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:implementation</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_implementation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>cce4da8a</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:00:25 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_versioninformation</spirit:name>
        <spirit:displayName>Version Information</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:docs.versioninfo</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_versioninformation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>cce4da8a</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:00:25 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_externalfiles</spirit:name>
        <spirit:displayName>External Files</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:external.files</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_externalfiles_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>cce4da8a</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>5</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRC</spirit:name>
            <spirit:value>11f01752</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>boundaryCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Tue Feb 09 22:01:51 UTC 2016</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>StaleAtRelink</spirit:name>
            <spirit:value>false</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
    </spirit:views>
    <spirit:ports>
      <spirit:port>
        <spirit:name>refclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.refclk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_p</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_p" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_n</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_n" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_bufg_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_bufg_out" xilinx:dependency="((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and  (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))  and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTXE2&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTHE2&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTPE2&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_bufg</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_bufg" xilinx:dependency="((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;)) = true())) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTXE2&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTHE2&quot;))  or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVER_TYPE&apos;))) = &quot;GTPE2&quot;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and  (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txn</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txn" xilinx:dependency="not ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txp</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txp" xilinx:dependency="not ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxn</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxn" xilinx:dependency="not ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxp</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxp" xilinx:dependency="not ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk125m</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk125m" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>independent_clock_bufg</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.independent_clock_bufg" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk2_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk2_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk2_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk2_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txoutclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txoutclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxoutclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxoutclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>resetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.resetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>cplllock</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.cplllock" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pma_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pma_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_locked_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_locked_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true() and  not ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pma_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pma_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_locked</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_locked" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and not ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_r</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_r" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_f</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_f" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_r_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_r_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_f_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_f_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_r_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_r_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_f_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_f_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txclk" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))= false()) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxclk" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;))= false())  and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = true()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk625</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk625" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true())) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk208</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk208" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;))) ))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk104</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk104" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk312</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk312" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk125_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk125_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk625_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk625_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true())) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk104_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk104_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk208_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk208_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;))) ))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>clk312_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.clk312_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rst_125_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rst_125_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>refclk125_n</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.refclk125_n" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;125&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>refclk125_p</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.refclk125_p" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;125&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>refclk156_25_n</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.refclk156_25_n" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;156.25&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>refclk156_25_p</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.refclk156_25_p" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;156.25&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>refclk625_n</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.refclk625_n" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;625&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>refclk625_p</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.refclk625_p" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (spirit:decode(id(&apos;PARAM_VALUE.LvdsRefClk&apos;)) = &quot;625&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_isolate</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_isolate" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdc</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdc" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_i" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_in" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_o" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_t</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_t" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>basex_or_sgmii</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.basex_or_sgmii" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DYNAMIC_SWITCHING&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtx_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtx_clk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_code_group</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">9</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.tx_code_group" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pma_tx_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pma_tx_clk" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>loc_ref</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.loc_ref" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ewrap</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ewrap" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_code_group</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">9</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rx_code_group" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pma_rx_clk0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pma_rx_clk0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>en_cdet</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.en_cdet" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TBI&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_10_100" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_100" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and (not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_10_100_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_100_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_10_100_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_100_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_10_100_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.speed_is_100_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_2_5G&apos;))) = false()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;)))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.status_vector" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>signal_detect</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.signal_detect" xilinx:dependency="(not (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>systemtimer_s_field</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">47</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.systemtimer_s_field" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 2) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>systemtimer_ns_field</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.systemtimer_ns_field" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 2) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>correction_timer</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">63</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.correction_timer" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 4) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxphy_s_field</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">47</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxphy_s_field" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 2) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxphy_ns_field</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxphy_ns_field" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 2) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxphy_correction_timer</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">63</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxphy_correction_timer" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 3) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) = 4) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outrefclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outrefclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0lock_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0refclklost_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0refclklost_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutrefclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outrefclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outrefclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outrefclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outrefclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0lock_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0refclklost_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0refclklost_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0reset_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())  and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutrefclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutrefclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxchariscomma_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxchariscomma_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcharisk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcharisk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbyteisaligned_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbyterealign_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcommadet_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpolarity_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_TXDIFFCTRL_WIDTH&apos;))-1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txdiffctrl_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpostcursor_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprecursor_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpolarity_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txinhibit_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprbssel_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprbsforceerr_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbscntreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbserr_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbssel_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_loopback_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txresetdone_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxresetdone_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpmaresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpmaresetdone_out" xilinx:dependency="(  (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynq&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;) ))  or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtex7&quot;) and (not ( ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7v585t&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7vx485t&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7v2000t&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xq7v585t&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xq7vx485t&quot;) ))) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdisperr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdisperr_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txbufstatus_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxnotintable_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxnotintable_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescanreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescandataerror_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescantrigger_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcdrhold_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpmareset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpmareset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpcsreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpcsreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbufreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbufstatus_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmhfhold_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmlfhold_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmhfoverden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmhfoverden_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmreset_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015i&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdfelpmreset_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdfeagcovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdfeagcovrden_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmen_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;))  and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_RXMONITOROUT_WIDTH&apos;))-1)">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxmonitorout_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxmonitorsel_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015i&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpaddr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DRPADDR_WIDTH&apos;))-1)">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpaddr_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpdi_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000000000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpdi_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpdo_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpdo_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpen_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drprdy_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drprdy_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpwe_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpwe_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DRPADDR_WIDTH&apos;))-1)">8</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpaddr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000000000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpdi" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpdo" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drprdy" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpwe" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_1588&apos;)) == 0) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TRANSCEIVER&apos;))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxcommadet</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxcommadet" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpolarity</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpolarity" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txdiffctrl</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_TXDIFFCTRL_WIDTH&apos;))-1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txdiffctrl" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpostcursor</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpostcursor" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprecursor</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprecursor" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpolarity</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpolarity" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txinhibit</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txinhibit" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_pcsrsvdin</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000000000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_pcsrsvdin" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprbssel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprbssel" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprbsforceerr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprbsforceerr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbscntreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbscntreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbserr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbserr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbssel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbssel" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_loopback</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_loopback" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txresetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxresetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxdisperr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxnotintable" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescanreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescanreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescandataerror</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescandataerror" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescantrigger</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescantrigger" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxcdrhold</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxcdrhold" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxdfelpmreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxdfelpmreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxlpmen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxlpmen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpmareset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpmareset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpmareset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpmareset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpcsreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpcsreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpcsreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpcsreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbufreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbufreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_gtrefclk1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_gtrefclk1" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpmaresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpmaresetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbufstatus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbufstatus" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txbufstatus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txbufstatus" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxrate</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxrate" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_cpllrefclksel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">001</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_cpllrefclksel" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_dmonitorout</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DMONITOROUT_WIDTH&apos;))-1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_dmonitorout" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DMONITOROUT_WIDTH&apos;))-1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_dmonitorout_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>idelay_rdy_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.idelay_rdy_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;)) ))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>idelay_rdy_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.idelay_rdy_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) =true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;)) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txn_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txn_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxn_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxn_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txp_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txp_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_isolate_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_isolate_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxp_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxp_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>signal_detect_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.signal_detect_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txn_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txn_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxn_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxn_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd_1" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd_1" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txp_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txp_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_isolate_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_isolate_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxp_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxp_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>signal_detect_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.signal_detect_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er_1" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txn_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txn_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxn_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxn_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txp_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txp_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_isolate_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_isolate_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxp_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxp_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>signal_detect_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.signal_detect_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector_1" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.status_vector_0" xilinx:dependency="( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.status_vector_1" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.status_vector_2" xilinx:dependency="(( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txclk_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txclk_0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxclk_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxclk_0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txclk_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txclk_1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxclk_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxclk_1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txclk_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txclk_2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxclk_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxclk_2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_EMAC_IF_TEMAC&apos;))) = false()) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and  ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdc_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdc_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_i_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_i_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_o_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_o_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_t_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_t_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_in_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_in_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdc_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdc_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_i_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_i_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_o_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_o_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_t_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_t_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_in_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_in_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdc_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdc_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_i_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_i_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_o_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_o_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ext_mdio_t_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ext_mdio_t_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_in_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_in_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_EXT_MDIO&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config_0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config_1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config_2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt_0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt_0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt_1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt_1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) != 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt_2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt_2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and ( (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) ))))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 3))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pll_locked_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pll_locked_out" xilinx:dependency="(  (spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pll_locked</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pll_locked" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_phy_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rx_phy_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_phy_dly_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rx_phy_dly_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_logic_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rx_logic_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rx_pll_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rx_pll_clk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_phy_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.tx_phy_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_phy_dly_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.tx_phy_dly_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>tx_pll_clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.tx_pll_clk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;)) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>dummy_port_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.dummy_port_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_LVDS&apos;))) and  ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = false() or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_IS_SGMII&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;)) )))   and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NUM_OF_LANES&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
    </spirit:ports>
    <spirit:modelParameters>
      <spirit:modelParameter xsi:type="spirit:nameValueTypeType" spirit:dataType="string">
        <spirit:name>c_elaboration_transient_dir</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_elaboration_transient_dir">.</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_component_name</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_component_name">GigEthGtx7Core</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_family</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_family">kintex7</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_is_sgmii</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_is_sgmii">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_use_transceiver</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_use_transceiver">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_use_tbi</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_use_tbi">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_is_2_5g</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_is_2_5g">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_use_lvds</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_use_lvds">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_has_an</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_has_an">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_has_mdio</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_has_mdio">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_has_ext_mdio</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_has_ext_mdio">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_sgmii_phy_mode</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_sgmii_phy_mode">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_dynamic_switching</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_dynamic_switching">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_sgmii_fabric_buffer</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_sgmii_fabric_buffer">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_1588</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_1588">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>gt_rx_byte_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.gt_rx_byte_width">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_EMAC_IF_TEMAC</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_EMAC_IF_TEMAC">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PHYADDR</spirit:name>
        <spirit:displayName>C Phy Addr</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PHYADDR" spirit:maximum="31" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>EXAMPLE_SIMULATION</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.EXAMPLE_SIMULATION" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_support_level</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_support_level">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_sub_core_name</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_sub_core_name">GigEthGtx7Core_gt</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_transceiver_type</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_transceiver_type">GTXE2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_transceivercontrol</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_transceivercontrol">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_xdevicefamily</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_xdevicefamily">xc7k325t</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_dmonitorout_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_dmonitorout_width">8</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_drpaddr_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_drpaddr_width">9</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_txdiffctrl_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_txdiffctrl_width">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_rxmonitorout_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_rxmonitorout_width">7</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_num_of_lanes</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_num_of_lanes">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_refclkrate</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_refclkrate">125</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>c_drpclkrate</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_drpclkrate">50.0</spirit:value>
      </spirit:modelParameter>
    </spirit:modelParameters>
  </spirit:model>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>choice_list_14b3d38f</spirit:name>
      <spirit:enumeration>125</spirit:enumeration>
      <spirit:enumeration>156.25</spirit:enumeration>
      <spirit:enumeration>250</spirit:enumeration>
      <spirit:enumeration>312.5</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_59cf7c2a</spirit:name>
      <spirit:enumeration>1000BASEX</spirit:enumeration>
      <spirit:enumeration>SGMII</spirit:enumeration>
      <spirit:enumeration>BOTH</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_7d6d1b3f</spirit:name>
      <spirit:enumeration>1</spirit:enumeration>
      <spirit:enumeration>2</spirit:enumeration>
      <spirit:enumeration>3</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_87de27d9</spirit:name>
      <spirit:enumeration>125</spirit:enumeration>
      <spirit:enumeration>156.25</spirit:enumeration>
      <spirit:enumeration>625</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_a8121708</spirit:name>
      <spirit:enumeration>GTPE2</spirit:enumeration>
      <spirit:enumeration>GTXE2</spirit:enumeration>
      <spirit:enumeration>GTHE2</spirit:enumeration>
      <spirit:enumeration>GTHE3</spirit:enumeration>
      <spirit:enumeration>GTHE4</spirit:enumeration>
      <spirit:enumeration>GTYE4</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_ac75ef1e</spirit:name>
      <spirit:enumeration>Custom</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_132eef99</spirit:name>
      <spirit:enumeration spirit:text="1G">1G</spirit:enumeration>
      <spirit:enumeration spirit:text="2 5G">2_5G</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_34f327d7</spirit:name>
      <spirit:enumeration spirit:text="Tri-Mode Ethernet MAC">TEMAC</spirit:enumeration>
      <spirit:enumeration spirit:text="Zynq PS Gigabit Ethernet Controller">GEM</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_39f08818</spirit:name>
      <spirit:enumeration spirit:text="Time of day">Time_of_day</spirit:enumeration>
      <spirit:enumeration spirit:text="Correction Field Format">Correction_Field_Format</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_7fb02b72</spirit:name>
      <spirit:enumeration spirit:text="10/100/1000 Mb/s (clock tolerance compliant with ethernet specification)">10_100_1000</spirit:enumeration>
      <spirit:enumeration spirit:text="10/100/1000 Mb/s (restricted tolerance for clocks) OR 100/1000 Mb/s">100_1000</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_b2abe35f</spirit:name>
      <spirit:enumeration spirit:text="Include Shared Logic in Core">Include_Shared_Logic_in_Core</spirit:enumeration>
      <spirit:enumeration spirit:text="Include Shared Logic in Example Design">Include_Shared_Logic_in_Example_Design</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_b8ddeea0</spirit:name>
      <spirit:enumeration spirit:text="Device Specific Transceiver">Transceiver</spirit:enumeration>
      <spirit:enumeration spirit:text="Ten Bit interface (TBI)">TBI</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlinstantiationtemplate_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>GigEthGtx7Core.vho</spirit:name>
        <spirit:userFileType>vhdlTemplate</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>GigEthGtx7Core.veo</spirit:name>
        <spirit:userFileType>verilogTemplate</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagesynthesis_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>gig_ethernet_pcs_pma_v15_1_0/hdl/gig_ethernet_pcs_pma_v15_1_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_cpll_railing.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard_multi_gt.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard_gt.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard_init.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_tx_startup_fsm.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_rx_startup_fsm.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core_reset_sync.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core_sync_block.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_reset_wtd_timer.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_transceiver.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core_block.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core_ooc.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_out_of_context</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlsynthesiswrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>gig_ethernet_pcs_pma_v15_1_0/hdl/gig_ethernet_pcs_pma_v15_1_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_ipstatic</spirit:userFileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_cpll_railing.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard_multi_gt.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard_gt.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_gtwizard_init.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_tx_startup_fsm.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_rx_startup_fsm.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core_reset_sync.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core_sync_block.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_reset_wtd_timer.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/GigEthGtx7Core_transceiver.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core_block.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v15_1_0</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlsimulationwrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>synth/GigEthGtx7Core.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_implementation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>GigEthGtx7Core_board.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:userFileType>USED_IN_board</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_versioninformation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>doc/gig_ethernet_pcs_pma_v15_1_changelog.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_externalfiles_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>GigEthGtx7Core.dcp</spirit:name>
        <spirit:userFileType>dcp</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>GigEthGtx7Core_stub.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>USED_IN_synth_blackbox_stub</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>GigEthGtx7Core_stub.vhdl</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_synth_blackbox_stub</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>GigEthGtx7Core_sim_netlist.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_single_language</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>GigEthGtx7Core_sim_netlist.vhdl</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_single_language</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
  </spirit:fileSets>
  <spirit:description>The 1G/2.5G Ethernet PCS/PMA or SGMII LogiCORE(TM) provides the functionality to implement one of two different specifications: firstly the IEEE 802.3 1000BASE-X specification; secondly the Serial-GMII (SGMII) specification which is closely based on 1000BASE-X.  The core provides a choice of physical interface options: a Ten-Bit-Interface (TBI) for connection to an external SERDES; high speed serial functionality using the device specific transceivers in Virtex-7, Kintex-7 and Artix-7; SGMII standard only - LVDS using SelectIO in Kintex-7 devices -2 speed grade and faster.  All options provide up to 1/2.5 gigabit per second total bandwidth.  When perfoming the SGMII standard, the core can carry Ethernet traffic up to 1/2.5 gigabit per second total bandwidth; this is inclusive of 10Mbps, 100Mbps, 1Gbps and 2.5Gbps Ethernet speeds.  The core is designed to interface to the LogiCORE Tri-Mode Ethernet MAC or Zynq Processor subsystem from Xilinx to provide a complete solution.</spirit:description>
  <spirit:parameters>
    <spirit:parameter>
      <spirit:name>Component_Name</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Component_Name" spirit:order="1">GigEthGtx7Core</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>USE_BOARD_FLOW</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.USE_BOARD_FLOW" spirit:order="1000" spirit:configGroups="1 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>ETHERNET_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.ETHERNET_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="1100" spirit:configGroups="1 UnGrouped">Custom</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>DIFFCLK_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.DIFFCLK_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="1200" spirit:configGroups="1 UnGrouped">Custom</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Standard</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Standard" spirit:choiceRef="choice_list_59cf7c2a" spirit:order="10000" spirit:configGroups="1 UnGrouped">1000BASEX</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>MaxDataRate</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.MaxDataRate" spirit:choiceRef="choice_pairs_132eef99" spirit:order="11000" spirit:configGroups="1 UnGrouped">1G</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Physical_Interface</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Physical_Interface" spirit:choiceRef="choice_pairs_b8ddeea0" spirit:order="20000" spirit:configGroups="2 UnGrouped">Transceiver</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Management_Interface</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Management_Interface" spirit:order="20100" spirit:configGroups="2 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Ext_Management_Interface</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Ext_Management_Interface" spirit:order="20120" spirit:configGroups="2 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>MDIO_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.MDIO_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="20110">Custom</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Auto_Negotiation</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Auto_Negotiation" spirit:order="20200" spirit:configGroups="2 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>SGMII_Mode</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.SGMII_Mode" spirit:choiceRef="choice_pairs_7fb02b72" spirit:order="30000" spirit:configGroups="3 UnGrouped">10_100_1000</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>SGMII_PHY_Mode</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.SGMII_PHY_Mode" spirit:order="40000" spirit:configGroups="4 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Enable_1588</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Enable_1588" spirit:order="60000" spirit:configGroups="6 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Enable_1588_1step</spirit:name>
      <spirit:displayName>Enable 1-step</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Enable_1588_1step" spirit:order="61000" spirit:configGroups="1 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Timer_Format</spirit:name>
      <spirit:displayName>Timer Format</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Timer_Format" spirit:choiceRef="choice_pairs_39f08818" spirit:order="61100" spirit:configGroups="1 UnGrouped">Time_of_day</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>EMAC_IF_TEMAC</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.EMAC_IF_TEMAC" spirit:choiceRef="choice_pairs_34f327d7" spirit:order="70000" spirit:configGroups="7 UnGrouped">TEMAC</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PHYADDR</spirit:name>
      <spirit:displayName>C Phy Addr</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PHYADDR" spirit:order="20110" spirit:configGroups="2 UnGrouped" spirit:minimum="0" spirit:maximum="31" spirit:rangeType="long">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>EXAMPLE_SIMULATION</spirit:name>
      <spirit:displayName>Example Simulation</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.EXAMPLE_SIMULATION" spirit:order="60040" spirit:configGroups="7 UnGrouped" spirit:minimum="0" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>SupportLevel</spirit:name>
      <spirit:displayName>Shared Logic</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.SupportLevel" spirit:choiceRef="choice_pairs_b2abe35f" spirit:order="8000" spirit:configGroups="1 UnGrouped">Include_Shared_Logic_in_Example_Design</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>TransceiverControl</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.TransceiverControl" spirit:order="9000" spirit:configGroups="1 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Transceiver_type</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Transceiver_type" spirit:choiceRef="choice_list_a8121708" spirit:order="15000" spirit:configGroups="1 UnGrouped">GTXE2</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Transceiver_type">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>RefClkRate</spirit:name>
      <spirit:displayName>Reference Clock Frequency (MHz)</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.RefClkRate" spirit:choiceRef="choice_list_14b3d38f" spirit:order="20011">125</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>LvdsRefClk</spirit:name>
      <spirit:displayName>Reference Clock Frequency (MHz)</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.LvdsRefClk" spirit:choiceRef="choice_list_87de27d9" spirit:order="20002">125</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>DrpClkRate</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.DrpClkRate" spirit:order="20001">50.0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.DrpClkRate">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>NumOfLanes</spirit:name>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.NumOfLanes" spirit:choiceRef="choice_list_7d6d1b3f" spirit:order="20003">1</spirit:value>
    </spirit:parameter>
  </spirit:parameters>
  <spirit:vendorExtensions>
    <xilinx:coreExtensions>
      <xilinx:displayName>1G/2.5G Ethernet PCS/PMA or SGMII</xilinx:displayName>
      <xilinx:coreRevision>0</xilinx:coreRevision>
      <xilinx:configElementInfos>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.Auto_Negotiation" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.Management_Interface" xilinx:valueSource="user"/>
      </xilinx:configElementInfos>
    </xilinx:coreExtensions>
    <xilinx:packagingInfo>
      <xilinx:xilinxVersion>2015.3</xilinx:xilinxVersion>
      <xilinx:checksum xilinx:scope="busInterfaces" xilinx:value="1c734f14"/>
      <xilinx:checksum xilinx:scope="fileGroups" xilinx:value="ffffd836"/>
      <xilinx:checksum xilinx:scope="ports" xilinx:value="cc3b6afa"/>
      <xilinx:checksum xilinx:scope="hdlParameters" xilinx:value="e4e7e484"/>
      <xilinx:checksum xilinx:scope="parameters" xilinx:value="a0162ee8"/>
    </xilinx:packagingInfo>
  </spirit:vendorExtensions>
</spirit:component>
